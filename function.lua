local loadstring = loadstring;
local game = game;
local writefile = writefile;
local hookfunction = hookfunction;
local delfile = delfile;
--==============================================
--==============================================
--==============================================
--==============================================
local repr = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Ozzypig/repr/master/repr.lua"))() -- formatter
local function tablr(table)
    return repr(table,{
        tabs=true,
        robloxFullName=true,
        robloxClassName=true,
        robloxProperFullName =true,
        pretty=true,
        sortKeys = true,
    })
end
if not _G.HookFunc then
    _G.HookFunc = {}
end
local HookFunc = _G.HookFunc;
local function hook(mode, func, MITM)
    -- create function with the functions
    -- hard coded XD
    HookFunc[#HookFunc+1]={}
    local context = HookFunc[#HookFunc]
    if mode == "replace" then
        context["target"] = func;
        context["MITM"] = MITM;
        context["old"] = nil;
        writefile("execution_context.lua", string.gsub([[
con["old"] = hookfunction(con["target"], function(...)
    local caller = getinfo(4).func; -- might be stack 3??
    return con["MITM"](caller, ...)
end)]], "con", "_G.HookFunc[" .. #HookFunc .. "]"))
        loadfile("execution_context.lua")()   -- execute the script
        --delfile("execution_context.lua")
        return #HookFunc
    elseif mode == "restore" then
        local _restored  = hookfunction(HookFunc[func]["target"], HookFunc[func]["old"])
        return _restored
    elseif mode == "wrap" then
        context["target"] = func;
        context["MITM"] = MITM;
        context["old"] = nil;
        writefile("execution_context.lua", string.gsub([[
con["old"] = hookfunction(con["target"], function(...)
    local caller = getinfo(4).func; -- might be stack 3??
    local _start = con["MITM"](0,caller,...);
    local _end = nil;
    local _res = nil;
    if _start == nil then
        _end = con["old"](...);
    else
        _end = con["old"](_start);
    end
    _res = con["MITM"](1,caller,...);
    if _res == nil then
        return _end;
    else
        return _res;
    end
end)]], "con", "_G.HookFunc[" .. #HookFunc .. "]"))
        loadfile("execution_context.lua")()   -- execute the script
        delfile("execution_context.lua")
        return #HookFunc;
    end
end

local con = hook("wrap", getrenv().print, function(state, caller, ...)
    rconsoleprint(tablr( getconstants(caller) ))
end)