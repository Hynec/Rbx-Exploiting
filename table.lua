local loadstring = loadstring;
local hookfunction = hookfunction;
local getinfo = getinfo;
local game = game;
local getrawmetatable = getrawmetatable;
local checkcaller = checkcaller;
local setreadonly = setreadonly;
local getnamecallmethod = getnamecallmethod;
local newcclosure = newcclosure;
local getcallingscript = getcallingscript;
--==============================================
--==============================================
--==============================================
--==============================================
local repr = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Ozzypig/repr/master/repr.lua"))() -- formatter
local function tablr(table)
    return repr(table,{
        tabs=true,
        robloxFullName=true,
        robloxClassName=true,
        robloxProperFullName =true,
        pretty=true,
        sortKeys = true,
    })
end
--==============================================
local function w_reg(table_)
    local mt = getrawmetatable(table_);
    if mt == nil then
        setmetatable(table_, {
    	    __index = newcclosure(function(tbl, idx)
    		    return rawget(tbl, idx)
    	    end),
    	    __newindex = newcclosure(function(tbl, idx, val)
    	    	rawset(tbl,idx,val)
    	    	return rawget(tbl, idx)
    	    end),
    	    __namecall = newcclosure(function() end)
        })
        mt = getrawmetatable(table_);
    else
        local success, err = pcall(function()
            return table_:w_setup()
        end)
        if success then
            return true
        end
    end
    local w_calls = {};
    local old_nc = mt.__namecall;
    local w_gets = {};
    local old_i = mt.__index;
    local w_sets = {};
    local old_ni = mt.__newindex;
    
    local function w_get(table, name_value, func)
        w_gets[#w_gets+1] = function(tab, index, target)
            if table == tab and index == name_value then
                return func(tab, target.func)
            end
        end
    end

    local function w_set(table, name_value, func)
        w_sets[#w_sets+1] = function(tab, index, new_value, target)
            if table == tab and index == name_value then
                -- could add recursive search here to find parent
                -- ie pcall while loop success add
                return func(tab, new_value, target.func)
            end
        end
    end

    local function w_call(table, nc_met, func)
        w_calls[#w_calls+1] = function(tab, nc_method, target, ...)    --- need to learn how these opperate
            if table == tab and nc_met == nc_method then
                return func(tab, target.func, ...)
            end
        end
    end
    setreadonly(mt, false);

    mt.__index = newcclosure(function(self, index)
        if  not checkcaller() then
            local target = getinfo(3);
            for _, v in pairs(w_gets) do
                local trying = v(self, index, target)
                if trying ~= nil then
                    return trying
                end
            end;
        end
        return old_i(self, index);
    end);

    mt.__newindex = newcclosure(function(self, index, new_value)
        if  not checkcaller() then
            local target = getinfo(3);
            for _, v in pairs(w_sets) do
                local trying = v(self, index, new_value, target)
                if trying ~= nil then
                    return trying
                end
            end;
        end
        return old_ni(self, index, new_value);
    end);

    mt.__namecall = newcclosure(function(self, ...)
        local nc_method = getnamecallmethod();
        if checkcaller() then
            if nc_method == "w_get" then
                return w_get(self, ...);
            elseif nc_method == "w_set" then
                return w_set(self, ...)
            elseif nc_method == "w_call" then
                return w_call(self, ...)
            elseif nc_method == "w_setup" then
                return true
            end
        else
            local target = getinfo(3);
            for _, v in pairs(w_calls) do
                local trying = v(self, nc_method, target, ...)
                if trying ~= nil then
                    return trying
                end
            end
        end
        return old_nc(self, ...);
    end);
    setreadonly(mt, true);
    return table_
end

-- allows for returning of your own value
-- emulates a key value in the l_humanoid table.
w_reg(game)
local l_humanoid= game.Players.LocalPlayer.Character.Humanoid;
local fake_walkspeed = l_humanoid.WalkSpeed;
l_humanoid:w_set("WalkSpeed", function(tab, new_value, fn)
    fake_walkspeed = new_value;
    return fake_walkspeed
end)
l_humanoid:w_get("WalkSpeed", function(tab, fn)
    return fake_walkspeed;
end)
print(l_humanoid:w_setup())
l_humanoid.WalkSpeed = 30