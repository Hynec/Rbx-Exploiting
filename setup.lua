--[[	NOTES	  ]-]-
use remotespy to find interesting remotes
find table via hydroxide upvalue scannner
generate error by hooking to table
hook to the function that acceses the table <or parent>
log arguments protos and/or upvalues
use the table printer to get values
]]--

--- TABLE PRINTERS -----
local repr = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Ozzypig/repr/master/repr.lua"))() -- formatter
local function tablr(table)
    return repr(table,{
        tabs=true,
        robloxFullName=true,
        robloxClassName=true,
        robloxProperFullName =true,
        pretty=true,
        sortKeys = true,
    })
end
------------------------
--RemoteSpy-------------
loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Upbolt/RemoteSpy/master/main.lua"))()
------------------------
--UpvalueSpy------------
local owner = "Upbolt"
local branch = "revision"
local function webImport(file)
    return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
end
webImport("init")
webImport("ui/main")
------------------------
--get tables by index---
local function fTable(index)
	local tabs = {};
	for i,v in pairs(getgc(true)) do
		if type(v) == "table" then
			if rawget(v,name) then
				tabs[#tabs+1]=v; ---(v,name,value)
			end
		end
	end
	return tabs
end
------------------------
--[[-TABLE BREAKER------
local GameMt = getrawmetatable(TABLE)
local OldIndex = GameMt.__index
local OldNameCall = GameMt.__namecall

setreadonly(GameMt, false)

GameMt.__index = newcclosure(function(Self, Key)
    return OldIndex(Self, Key)
end)

GameMt.__namecall = newcclosure(function(Self, ...)
    local NamecallMethod = getnamecallmethod()

    return OldNameCall(Self, ...)
end)

setreadonly(GameMt, true)
]]----------------------
--Function Finder-------
local function locate(name)
    local t = {}
    for _, v in pairs(getgc()) do
        if type(v) == "function" and not is_synapse_function(v) then
            if getinfo(v).name == name then
                t[#t+1]=v
            end
        end
    end
    return t;
end
------------------------
--- Env Dump -----------
local function Env_Dump(func)
    print("== Dumping: <",getinfo(func).name,"> ====================")
    print(tablr(getinfo(func)))
    print(tablr(getupvalues(func)))
    print(tablr(getconstants(func)))
    print(tablr(getprotos(func)))
    print("== Dump End =============================")
end
------------------------
--- Hook Function ------
old_func = hookfunction(func, function(...)
	return old_func(...)
end)
------------------------