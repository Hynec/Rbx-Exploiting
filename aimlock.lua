local game = game
local IsA = game.IsA
local workspace = workspace;
local camera = workspace.CurrentCamera
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()

local center = Vector2.new(Mouse.ViewSizeX/2,Mouse.ViewSizeY/2);
local UserInputService = game:GetService("UserInputService")
local RenderStepped = game:GetService("RunService").RenderStepped
local Ray = Ray;
local Instance = Instance;
local CFrame= CFrame;
local TweenInfo = TweenInfo;
local TweenService = game:GetService("TweenService")
TweenCFrame = Instance.new("CFrameValue")

local function addtables(table, table2)
    for i, v in pairs(table) do
        table2[i] = v
    end
    return table2
end

local function getvalid(objs, settings)
    local wallbang = (settings.wallbang or 0)
    local fov = settings.fov or 100
    local getbody = settings.getbody or function(obj) return obj.Character end
    local R_whitelist = settings.whitelist or {}
    local getpart = settings.getpart or function(obj) if obj.Name ~= game.Players.LocalPlayer.Character.Name then return obj.Character["Head"] end end
    local matchesdesc = settings.matchesdesc;
    local valid = {};
    local current =  camera.CFrame.p
    for _, obj in pairs(objs) do
        for _, part in pairs(getbody(obj):GetDescendants()) do
            if IsA(part, "MeshPart") or IsA(part, "Part") then
                table.insert(R_whitelist,part)
            end
        end
    end
    for _, obj in pairs(objs) do
        local whitelist = R_whitelist
        local target = getpart(obj)
        if target ~= nil then
            local Vector3_p = target.CFrame.p;
            local Vector2_p, onScreen = camera:WorldToViewportPoint(Vector3_p)
            local Vector2_p = Vector2.new(Vector2_p.X, Vector2_p.Y)
            if onScreen then
                local Mag_2D = (center - Vector2_p).Magnitude
                if fov - Mag_2D > 0 then
                    local ray = Ray.new(current, Vector3_p - current)
                    local times = 0;
                    local LastPart = workspace
                    repeat
                        LastPart = workspace:FindPartOnRayWithIgnoreList(ray, whitelist)
                        if LastPart ~= nil and (matchesdesc==nil or not matchesdesc(LastPart)) then
                            times = times + 1
                        end
                        table.insert(whitelist, LastPart)
                    until (LastPart == nil or wallbang < times)
                    if wallbang >= times then
                       table.insert(valid, {
                           OBJ = obj,
                            Mag_2D = Mag_2D,
                            Mag_3D = (Vector3_p - current).Magnitude,
                            Collisions = times,
                            V3 = Vector3_p
                        })
                    end
                end
            end
        end
    end
    return valid;
end

local function cam_tween(partpos)
    TweenStatus = true
    TweenCFrame.Value = workspace.CurrentCamera.CFrame
    local tweenframe = TweenService:Create(TweenCFrame, TweenInfo.new(0.2),{
        Value = CFrame.new(workspace.CurrentCamera.CFrame.Position, partpos)
    })
    tweenframe:Play()
    tweenframe.Completed:Wait()
    TweenStatus = nil
    TweenCFrame.Value = CFrame.new(0,0,0)
end

local aim_connect = RenderStepped:Connect(function()
	local custom_filter = custom_filter or (function(data)
		-- defaults to by closest in 2D magnitude
        local smallest = math.huge;
        local id = nil;
		for i, v in pairs(data) do
			if v.Mag_2D < smallest then
				smallest = v.Mag_2D
				id = i;
			end
		end
		return id;
    end)
	local DATA= getvalid(game.Players:GetChildren(), {
        fov = 300
    });
	local selected = custom_filter(DATA)
	if TweenStatus == nil and selected ~= nil and DATA[selected]["Mag_2D"] > 150 then
        cam_tween(DATA[selected].V3)
    end
    if TweenStatus == true then
        workspace.CurrentCamera.CFrame = TweenCFrame.Value
    end
    if selected ~= nil and DATA[selected]["Mag_2D"] < 150 and TweenStatus == nil then
        workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, DATA[selected].V3)
    end
end)
